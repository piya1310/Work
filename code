environments:

  
  DEV:
    cmdb:
      appid: APP000010043717
      deploymentEnvironment: development
    versionCalculation:
      patternType: jnj-developer-branch
    unitTest:
      enabled: false
      dir: "project"
      type: npm
      coverageReportFile: jest/coverage/lcov.info
    lint:
      enabled: true
      dir: "project"
      type: npm
    staticAnalysis:
      enabled: true
      type: multi
      stages:
        sonar:
          enabled: true
          type: sonar
          shortLivedAnalysis: false
          longLivedAnalysis: true
          shortLivedBuildResults:
            BLOCKER:
              FAILURE: 0
            CRITICAL:
              FAILURE: 50
            IGNORE:
              MAJOR: true
              MINOR: true
              INFO: true
            QUALITY_GATE:
              ERROR: FAILURE
              WARN: UNSTABLE
          longLivedBuildResults:
            BLOCKER:
              FAILURE: 0
            CRITICAL:
              FAILURE: 50
            IGNORE:
              MAJOR: true
              MINOR: true
              INFO: true
            QUALITY_GATE:
              ERROR: UNSTABLE
              WARN: SUCCESS
    assembleForPackage:
      enabled: true
      type: npm
      installCommand: "npm install --include=dev"      
      ommand: npm run build:dev
    package:
      enabled: true
      type: multi
      stages:
        Helm:
          enabled: true
          type: helm
        tar-package:
          type: tar.gz
          enabled: true
    publish:
      enabled: true
      type: multi
      stages:
        artifactory-spec:
          enabled: true
          type: artifactory-spec      
        Helm:
          enabled: true
          type: helm
        Docker:
          enabled: true
          type: docker
          tagStrategy: dev
          prerelease:
            tagStrategy: prerelease
          release:
            tagStrategy: release
    deploy:
      enabled: true
      type: multi
      stages:
        appDeployment:
          enabled: true
          type: helm
          name: rise-visualization-mf
          namespace: rise-dev
          configFiles:
            - repo: https://sourcecode.jnj.com/scm/asx-javz/visualization-mf.git
              repoCredentialsId: "sourcecode-bitbucket"
              files:
                - file: _scm_config/dev.values.yaml
                  type: plaintext
                - file: _scm_config/common.values.yaml
                  type: plaintext
          dryRun: false
          kubernetesConfig:
            type: eks
            region: us-east-1
            credentialsId: "itx-bvx-eatjenkinsadminapi"
            name: itx-bvx-rise-test
          atomic: false
  
  
can we add any log 
where exactly build is created and stored and when pipeline is running that time in pipeline.log file which keyword i need to search so will get logged information that build is stored --- level something like that .
then following is my dockerfile
FROM jnj.artifactrepo.jnj.com/nginxinc/nginx-unprivileged:1.24-alpine

# Remove the default Nginx configuration
RUN rm /etc/nginx/conf.d/default.conf

# Inline Nginx configuration that listens on 0.0.0.0:3000
RUN echo 'server { \
    listen 0.0.0.0:3000; \
    server_name localhost; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Add before COPY command
RUN echo "Verifying build directory..." && \
    ls -l /usr/share/nginx/html/ && \
    test -d /usr/share/nginx/html/build

# Copy the contents of the build folder to the Nginx web server directory
COPY build/ /usr/share/nginx/html/

# Expose port 3000
EXPOSE 3000

# Start Nginx and your React application on port 3000
CMD ["nginx", "-g", "daemon off;"]
