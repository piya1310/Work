javascript
import React, { useState, useEffect } from 'react';

// Assuming the height of each product card is known, replace `CARD_HEIGHT` with the actual height in pixels
const CARD_HEIGHT = 150; // Example height of each card, adjust accordingly

const MyComponent = ({ data, sortValue, value, loginUserEmail }) => {
  const [visibleItems, setVisibleItems] = useState(0);
  const [items, setItems] = useState<ExperimentalDataItem[]>([]);
  const [hasMore, setHasMore] = useState(true);

  const updateVisibleItems = () => {
    const numberOfItems = Math.floor(window.innerHeight / CARD_HEIGHT);
    setVisibleItems(numberOfItems > 0 ? numberOfItems : 1); // Ensure at least 1 item is displayed
  };

  useEffect(() => {
    // Set initial visible items on mount
    updateVisibleItems();

    // Update visible items on window resize
    window.addEventListener('resize', updateVisibleItems);
    return () => {
      window.removeEventListener('resize', updateVisibleItems);
    };
  }, []);

  useEffect(() => {
    if (sortValue === null) {
      setItems(data?.product?.slice(0, visibleItems));
    } else {
      let copyArrayValue: ExperimentalDataItem[] = productSortFunction(data?.product, sortValue);
      setItems(copyArrayValue);
    }
  }, [visibleItems, data?.product?.length, data, sortValue]);

  const loadMore = () => {
    setVisibleItems((prevVisibleItems) => prevVisibleItems + 4);
    items.length > 0 ? setHasMore(true) : setHasMore(false);
  };

  useEffect(() => {
    if (value === "Modified Date") {
      const copyArrayValue: ExperimentalDataItem[] = [...data.product]
        .sort((a, b) => {
          const convertDate = a?.updatedAt ?? "";
          const convertDateB = b?.updatedAt ?? "";
          return new Date(convertDate).getTime() - new Date(convertDateB).getTime();
        })
        .reverse();

      setItems(copyArrayValue.slice(0, visibleItems));
    }
  }, [data?.product, value, visibleItems]);

  return (
    <InfiniteScroll
      dataLength={items?.length}
      next={loadMore}
      hasMore={hasMore}
      loader={""}
    >
      {gridViewOpen ? (
        <div style={{ top: "20px", marginTop: "10px" }}>
          <GridviewCard
            props={items}
            refetch={data.refetch}
            pageRouter="myproduct"
            sort_order={value}
            loggedInUserEmail={loginUserEmail}
          />
        </div>
      ) : (
        <div style={{ top: "20px", marginTop: "10px", paddingRight: "24px" }}>
          <ListviewCard
            props={items}
            refetch={data.refetch}
            pageRouter="myproduct"
            sort_order={value}
            loggedInUserEmail={loginUserEmail}
          />
        </div>
      )}
    </InfiniteScroll>
  );
};

export default MyComponent;
