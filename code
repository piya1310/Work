const [visibleItems, setVisibleItems] = useState(0);
const [items, setItems] = useState<ExperimentalDataItem[]>([]);

useEffect(() => {
  // Set initial visible items based on the data length
  if (data?.product) {
    setVisibleItems(data.product.length);
  }
}, [data?.product]);

useEffect(() => {
  if (sortValue === null) {
    setItems(data?.product?.slice(0, visibleItems));
  } else {
    let copyArrayvalue: ExperimentalDataItem[] = [];
    copyArrayvalue = productSortFunction(data?.product, sortValue);
    setItems(copyArrayvalue);
  }
}, [visibleItems, data?.product?.length, data, sortValue]);

const loadMore = () => {
  setVisibleItems((prevVisibleItems) => 
    Math.min(prevVisibleItems + 4, data.product.length) // Ensure it does not exceed available items
  );
  items.length > 0 ? setHasMore(true) : setHasMore(false);
};

useEffect(() => {
  if (value === "Modified Date") {
    const copyArrayvalue: ExperimentalDataItem[] = [...data.product]
      .sort((a, b) => {
        const convertDate = a?.updatedAt ?? "";
        const convertDateB = b?.updatedAt ?? "";
        return (
          new Date(convertDate).getTime() - new Date(convertDateB).getTime()
        );
      })
      .reverse();
    setItems(copyArrayvalue.slice(0, visibleItems));
  }
}, [data?.product, value, visibleItems]);

<div style={{ width: "75px", display: "contents" }}>
  <span
    style={{
      fontFamily: "kenvue-sans-regular",
      fontWeight: "400",
      fontSize: "13.33px",
    }}
  >
    {data.product.length} Products
  </span>
</div>

{data.product.length <= 0 && (
  <div className="product_no_result_label">Nothing to see here yet!</div>
)}

<InfiniteScroll
  dataLength={items?.length}
  next={loadMore}
  hasMore={hasMore}
  loader={""}
>
  {gridViewOpen ? (
    <div style={{ top: "20px", marginTop: "10px" }}>
      <GridviewCard
        props={items}
        refetch={data.refetch}
        pageRouter="myproduct"
        sort_order={value}
        loggedInUserEmail={loginUserEmail}
      />
    </div>
  ) : (
    <div style={{ top: "20px", marginTop: "10px", paddingRight: "24px" }}>
      <ListviewCard
        props={items}
        refetch={data.refetch}
        pageRouter="myproduct"
        sort_order={value}
        loggedInUserEmail={loginUserEmail}
      />
    </div>
  )}
</InfiniteScroll>
