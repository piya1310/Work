import { useState, useEffect } from 'react';

const YourComponent = (props) => {
  const [visibleItems, setVisibleItems] = useState(0); // Initialize to 0 or calculated dynamically
  const [items, setItems] = useState([]); // Assuming you have an items state
  const [hasMore, setHasMore] = useState(false);
  
  useEffect(() => {
    // Update items based on props.ExperimentalData and visibleItems
    setItems(props?.ExperimentalData?.slice(0, visibleItems));
  }, [visibleItems, props?.ExperimentalData]);

  useEffect(() => {
    // Set visibleItems to the length of items when items are updated
    if (props?.ExperimentalData) {
      setVisibleItems(props.ExperimentalData.length);
    }
  }, [props?.ExperimentalData]);

  const loadMore = () => {
    setVisibleItems((prevVisibleItems) => prevVisibleItems + 4);
    props?.ExperimentalData?.length > 0 ? setHasMore(true) : setHasMore(false);
  };

  return (
    <>
      {items?.length > 0 ? (
        <>
          <span
            style={{
              fontFamily: "kenvue-sans-regular",
              fontWeight: "400",
              fontSize: "13.33px",
              marginLeft: "8px",
              marginBottom: "10px",
            }}
          >
            {items?.length > 0 && items ? `${items?.length} Assessments` : " "}
          </span>

          <InfiniteScroll
            dataLength={items.length}
            next={loadMore}
            hasMore={hasMore}
            loader={""}
            style={{ overflow: "hidden" }}
          >
            {gridViewOpen ? (
              <div style={{ marginTop: "24px" }}>
                <GridViewComponentExperimental
                  props={items}
                  varProductData={props.varproductData}
                  refetch={props.refetch}
                  varUserCRUDAccess={props.varUserCRUDAccess}
                  sort_order={value}
                />
              </div>
            ) : (
              <div style={{
                paddingRight: "24px", gap: "24px", display: "grid", marginTop: "24px",
              }}>
                <ListViewComponentExperimental
                  props={items}
                  varProductData={props.varproductData}
                  refetch={props.refetch}
                  varUserCRUDAccess={props.varUserCRUDAccess}
                  sort_order={value}
                />
              </div>
            )}
          </InfiniteScroll>
        </>
      ) : null}
    </>
  );
};

export default YourComponent;
