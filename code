javascript
import React, { useEffect, useState } from 'react';

// Utility function to calculate visible items based on window size
const calculateVisibleItems = () => {
  const cardHeight = 200; // Approximate height of each card including margins (adjust as needed)
  const windowHeight = window.innerHeight;
  return Math.floor(windowHeight / cardHeight); // or wherever you want to calculate based on
};

const YourComponent = (props) => {
  const [visibleItems, setVisibleItems] = useState(calculateVisibleItems());
  const [items, setItems] = useState<ExperimentalDataItem[]>([]);
  const [hasMore, setHasMore] = useState(true);

  // Effect to manage the loading of items
  useEffect(() => {
    if (sortValue === null) {
      setItems(data?.product?.slice(0, visibleItems));
    } else {
      let copyArrayvalue: ExperimentalDataItem[] = productSortFunction(data?.product, sortValue);
      setItems(copyArrayvalue.slice(0, visibleItems));
    }
  }, [visibleItems, data?.product?.length, data, sortValue]);

  // Load more items
  const loadMore = () => {
    setVisibleItems((prevVisibleItems) => prevVisibleItems + 4);
    setHasMore(items.length > 0);
  };

  // Handling window resize to adjust visible items
  useEffect(() => {
    const handleResize = () => {
      setVisibleItems(calculateVisibleItems());
    };

    window.addEventListener('resize', handleResize);
    
    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return (
    <InfiniteScroll
      dataLength={items?.length}
      next={loadMore}
      hasMore={hasMore}
      loader={""}
    >
      <Grid className="product-grid-container">
        {items.map((row: ExperimentalDataItem, row_index: number) => (
          <div className="card-container" key={row_index + 1}>
            <CardContent
              className="card-content"
              onClick={() => handleCardClick(row)}
            >
              // Card content goes here...
            </CardContent>
          </div>
        ))}
      </Grid>
      // Other components...
    </InfiniteScroll>
  );
};
