following is my manifest-advanced.yaml
"""
# Pipeline details across environments (defaults)
common:
  pipelineType: app-dev
  debug: true
  helm:
    chartRepo: javz-helm-charts
    chartName: rise-visualization-mf

  versionFileUpdates:
    - type: yaml
      file: _scm_helm/Chart.yaml
      path: version
    - type: yaml
      file: _scm_helm/values.yaml
      path: image.tag
  assembleForPackage:
    type: npm
    enabled: true
    credentialsId: jnj-eat-artifactory-build
    dir: project
    installCommand: npm install
    persistStash: true
  versionCalculation:
    enabled: true
    type: gitversion

  unitTest:
    enabled: false

  lint:
    enabled: false

  staticAnalysis:
    enabled: false
    type: multi
    stages:
      sonar:
        enabled: false
        type: sonar
        shortLivedAnalysis: false
        longLivedAnalysis: false
        shortLivedBuildResults:
          BLOCKER:
            FAILURE: 0
          CRITICAL:
            FAILURE: 50
          IGNORE:
            MAJOR: true
            MINOR: true
            INFO: true
          QUALITY_GATE:
            ERROR: FAILURE
            WARN: SUCCESS
        longLivedBuildResults:
          BLOCKER:
            FAILURE: 0
          CRITICAL:
            FAILURE: 50
          IGNORE:
            MAJOR: true
            MINOR: true
            INFO: true
          QUALITY_GATE:
            ERROR: UNSTABLE
            WARN: SUCCESS

  package:
    enabled: false
    type: multi
    stages:
      Helm:
        type: helm
        enabled: false
        chartRepo: javz-helm-charts
        chartName: rise-visualization-mf
        versionFileUpdates:
          - type: yaml
            file: _scm_helm/Chart.yaml
            path: version
          - type: yaml
            file: _scm_helm/values.yaml
            path: image.tag
      tar-package:
        type: tar.gz
        enabled: false
        name: visualization-mf
        packageDir: ./

  publish:
    enabled: false
    type: "multi"
    stages:
      artifactory-spec:
        enabled: false
        type: artifactory-spec
        target: javz-docker/visualization-mf/
        fileName: visualization-mf-*.tar.gz
      Helm:
        enabled: false
        type: helm
        chartRepo: javz-helm-charts
        chartName: rise-visualization-mf
      Docker:
        enabled: false
        type: docker
        credsList:
          - registry: https://jnj.artifactrepo.jnj.com
            credentialsId: jnj-eat-artifactory
          - registry: https://javz-docker.artifactrepo.jnj.com
            credentialsId: sourcecode-bitbucket

  buildAnalysis:
    enabled: false
    xrayFailBuild: false

  buildAnnouncements:
    enabled: true
    destinations:
      team-emails:
        type: email
        format: buildstate
        recipients: [DL-RISE-Monitoring@its.jnj.com]
        startEnabled: false
        successEnabled: true
        unstableEnabled: true
        failureEnabled: true
        jobTriggers: []

  deploy:
    enabled: true
    type: "multi"
    parallel: "false"
    stages:
      # appDeployment section deploys the published helm chart to kubernetes cluster
      appDeployment:
        enabled: false
        type: helm
        name: rise-visualization-mf
        createNamespace: true
        chartRepoCredentialsId: "sourcecode-bitbucket"
        atomic: true
        kubernetesConfig:
          type: eks
          name: itx-bvx-rise-test
          region: us-east-1
          credentialsId: "itx-bvx-eatjenkinsadminapi"

  resolveArtifacts:
    enabled: false

environments:

  
  DEV:
    cmdb:
      appid: APP000010043717
      deploymentEnvironment: development
    versionCalculation:
      patternType: jnj-developer-branch
    unitTest:
      enabled: false
      dir: "project"
      type: npm
      coverageReportFile: jest/coverage/lcov.info
    lint:
      enabled: true
      dir: "project"
      type: npm
    staticAnalysis:
      enabled: true
      type: multi
      stages:
        sonar:
          enabled: true
          type: sonar
          shortLivedAnalysis: false
          longLivedAnalysis: true
          shortLivedBuildResults:
            BLOCKER:
              FAILURE: 0
            CRITICAL:
              FAILURE: 50
            IGNORE:
              MAJOR: true
              MINOR: true
              INFO: true
            QUALITY_GATE:
              ERROR: FAILURE
              WARN: UNSTABLE
          longLivedBuildResults:
            BLOCKER:
              FAILURE: 0
            CRITICAL:
              FAILURE: 50
            IGNORE:
              MAJOR: true
              MINOR: true
              INFO: true
            QUALITY_GATE:
              ERROR: UNSTABLE
              WARN: SUCCESS
    assembleForPackage:
      enabled: true
      type: npm
      installCommand: "npm install --include=dev"      
      command: npm run build:dev
    package:
      enabled: true
      type: multi
      stages:
        Helm:
          enabled: true
          type: helm
        tar-package:
          type: tar.gz
          enabled: true
    publish:
      enabled: true
      type: multi
      stages:
        artifactory-spec:
          enabled: true
          type: artifactory-spec      
        Helm:
          enabled: true
          type: helm
        Docker:
          enabled: true
          type: docker
          tagStrategy: dev
          prerelease:
            tagStrategy: prerelease
          release:
            tagStrategy: release
    deploy:
      enabled: true
      type: multi
      stages:
        appDeployment:
          enabled: true
          type: helm
          name: rise-visualization-mf
          namespace: rise-dev
          configFiles:
            - repo: https://sourcecode.jnj.com/scm/asx-javz/visualization-mf.git
              repoCredentialsId: "sourcecode-bitbucket"
              files:
                - file: _scm_config/dev.values.yaml
                  type: plaintext
                - file: _scm_config/common.values.yaml
                  type: plaintext
          dryRun: false
          kubernetesConfig:
            type: eks
            region: us-east-1
            credentialsId: "itx-bvx-eatjenkinsadminapi"
            name: itx-bvx-rise-test
          atomic: false 

"""
follwoing is my  _scm_container\visualization-mf\Dockerfile
"""
FROM jnj.artifactrepo.jnj.com/nginxinc/nginx-unprivileged:1.24-alpine

# Remove the default Nginx configuration
RUN rm /etc/nginx/conf.d/default.conf

# Inline Nginx configuration that listens on 0.0.0.0:3000
RUN echo 'server { \
    listen 0.0.0.0:3000; \
    server_name localhost; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf


# Copy the contents of the build folder to the Nginx web server directory
COPY build/ /usr/share/nginx/html/

# Expose port 3000
EXPOSE 3000

# Start Nginx and your React application on port 3000
CMD ["nginx", "-g", "daemon off;"]"""
following is my _scm_helm\templates\deployment.yaml
"""
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jnj-rise.fullname" . }}
  labels:
    {{- include "jnj-rise.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "jnj-rise.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "jnj-rise.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "jnj-rise.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          # envFrom
          env:
            - name: PORT
              value: '3000'
            - name: NODE_ENV
              value: "{{ .Values.visualizationmf.NODE_ENV }}"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            requests: 
              cpu: "{{ .Values.visualizationmf.REQUESTS_CPU }}"
              memory: "{{ .Values.visualizationmf.REQUESTS_MEMORY }}"
            limits:
              cpu: "{{ .Values.visualizationmf.LIMITS_CPU }}"
              memory: "{{ .Values.visualizationmf.LIMITS_MEMORY }}"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

"""
following is my _scm_helm\templates\ingress.yaml
"""
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/alias: "true"
    cert-manager.io/cluster-issuer: sectigo
    nginx.ingress.kubernetes.io/use-regex: "true"
  name: visualization-mf
  namespace: "{{ .Values.visualizationmf.NAMESPACE }}"
spec:
  ingressClassName: nginx
  rules:
  - host: "{{ .Values.visualizationmf.HOST }}"
    http:
      paths:
        - backend:
            service:
              name: rise-visualization-mf
              port:
                number: 80
          path: /?(.*)
          pathType: Prefix
          
  tls:
  - hosts:
    - "{{ .Values.visualizationmf.HOST }}"
    secretName: "{{ .Values.visualizationmf.SECRET }}"
"""
following is my _scm_helm\values.yaml
"""
# Default values for jnj-rise.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
image:
  repository: javz-docker.artifactrepo.jnj.com/visualization-mf
  pullPolicy: IfNotPresent
  tag: 1.0.0
imagePullSecrets:
- name: javz-docker-artifactory
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80

"""
could you please guide me with analysing file that where i need to add your sugguested solution . 
also where to include longer timeout to pass the deploy stage?
