 RUNS  src/modules/product/_test_/product.routes.spec.ts
C:\Users\PJadha04\Documents\RDX BS MS\rdx-sip-bs-ms\src\utils\logger\index.ts:336        
C:\Users\PJadha04\Documents\RDX BS MS\rdx-sip-bs-ms\src\utils\logger\index.ts:336        
    logger_config_js_1.logger.info(message, {
                              ^

TypeError: Cannot read properties of undefined (reading 'info')
    at Function.info (C:\Users\PJadha04\Documents\RDX BS MS\rdx-sip-bs-ms\src\utils\logger\index.ts:336:31)
    at updateOrCreateToPostgres (C:\Users\PJadha04\Documents\RDX BS MS\rdx-sip-bs-ms\src\helpers\postgresAudit.service.ts:597:22)
    at formatAndSaveAuditData (C:\Users\PJadha04\Documents\RDX BS MS\rdx-sip-bs-ms\src\modules\audit\audit.service.ts:182:65)
    at productController.findByIdAndDelete (C:\Users\PJadha04\Documents\RDX BS MS\rdx-sip-bs-ms\src\modules\product\product.controller.ts:559:29)

Node.js v20.16.0
above error i am getting after added following code in product.routes.spec.ts
import { mockRequest, mockResponse } from "../../../utils/MockInterceptor.js";
import {ProductMock} from "../../../mocks/Product.mock.js";
import ProductModel, { initializeProductModel } from "../product.model.js";
import productRouter from "../product.routes.js";
import CalculationsModel, { initializeCalculationModel } from "../../calculation_api/calculation.model.js";
import FormulaModel, { initializeFormulaModel } from "../../formula/formula.model.js";
import FormulaMock from "../../../mocks/Formula.mock.json";
import ComponentSearchMock from "../../../mocks/ComponentSeach.mock.json";
import initializeProductController from "../product.controller.js";
import RawMaterialsModel, { initializeRawMaterialModel } from "../../raw_material_search/rm_search.model.js";
import RawMaterialMock from "../../../mocks/RawMaterial.mock.json";
import ProductSearchModel, { initializeComponentSearchModel } from "../../component_pc_search/component_search.model.js";
import express from "express";

jest.mock('../../../utils/logger/logger-config', () => ({
  LOG_DIR: '/dummy/logs',
  combine: jest.fn(),
  timestamp: jest.fn(),
  printf: jest.fn(),
  json: jest.fn(),
  label: jest.fn(),
}));

jest.mock('../../../lib/db.connection', () => ({
  connectDatabase: jest.fn().mockResolvedValue({
    connection: { readyState: 1 },
    disconnect: jest.fn()
  })
}));
following is my logger-config.
"""
// Required imports
import rTracer from 'cls-rtracer';
import { createLogger, format, transports } from 'winston';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const { combine, timestamp, printf, json, label } = format;

// Resolve __dirname for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


// Define the log file directory
const LOG_DIR = path.join(__dirname, '../../logs');

// Ensure the logs directory exists
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true });
}

// Get the current date in YYYY-MM-DD format
const getLogFileName = () => {
  const currentDate = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
  return path.join(LOG_DIR, `${currentDate}.log`);
};

// Log level configuration
const LOGLEVEL = process.env.LOG_LEVEL || 'http';

const loggerConfig = {
  levels: {
    error: 0,
    warn: 1,
    info: 2,
    http: 3,
    verbose: 4,
    debug: 5,
    silly: 6,
  },
};

const logLevels = Object.keys(loggerConfig.levels);

// Correlation ID format
const rTracerFormat = printf((info) => {
  const rid = rTracer.id();
  const logInfo = { ...info, correlationId: rid };
  return JSON.stringify(logInfo);
});

// File transport for logging into date-wise log files
const fileTransport = new transports.File({
  filename: getLogFileName(), // Dynamic filename based on date
  level: 'http', // Minimum log level for file
  format: combine(
    label({ label: process.env.npm_package_name || 'App' }),
    timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
    json(), // Store log messages as JSON
    printf(({ timestamp, level, message, label, ...meta }) => {
      return `[${timestamp}] [${label}] [${level.toUpperCase()}] ${message} ${JSON.stringify(
        meta
      )}`;
    })
  ),
});

// Create the logger
const logger = createLogger({
  levels: loggerConfig.levels,
  level: LOGLEVEL && logLevels.includes(LOGLEVEL?.toLowerCase()) ? LOGLEVEL.toLowerCase() : 'http',
  transports: [
    new transports.Console({
      format: format.combine(
        format.label({ label: process.env.npm_package_name }),
        format.timestamp(),
        format.json(),
        rTracerFormat
      ),
    }),
    fileTransport,
  ],
});

// Export the logger and rTracer
export { rTracer, logger };
"""
