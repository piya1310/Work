const debouncedSearchTerm = useDebounce(searchValue, 1000);
const {
  mutate: fetchRawMaterialData,
  data,
  isLoading,
} = useGetRawMaterialDataByKeyword(debouncedSearchTerm, rawMaterialPage);
const [noResultFound, setNoResultFound] = useState < boolean > (false);
const [searchResults, setSearchResults] = useState < IRawMaterialObject[] > ([]);
<div useEffect(() => {
  if (data?.length > 0) {
    setSearchResults(data);
    setNoResultFound(false);
  }
  if (data && data?.length == 0) {
    setNoResultFound(true);
  }

}, [data]);
                  className={`disabledfield-wrapper ${!isFormulaCompositionEditable ? "setWidthforwrapper" : ""
                    }`}>
                  {isFormulaCompositionEditable && (
                    <>
                      <TextField
                        value={searchValue}
                        onChange={handleSearchChange}
                        className="disabledfield"
                        placeholder="Search Raw material or code here..."
                        InputProps={{
                          disableUnderline: true,
                          endAdornment: isLoading ? (
                            <CircularProgress
                              color="inherit"
                              size={20}
                              sx={{ position: "absolute", right: "5px" }}
                            />
                          ) : (
                            <p style={{ position: "absolute", right: "5px", minWidth: "20px" }}></p>
                          ),
                        }}
                        sx={{
                          width: "100%",
                          maxWidth: "400px",
                          marginBottom: "10px",
                          marginTop: "5px",
                          "& input": {
                            padding: "8px 14px",
                          },
                          "& fieldset": {
                            border: "none", // Remove the border around the TextField
                          },
                          "& .MuiOutlinedInput-root": {
                            "&:hover fieldset": {
                              border: "none", // Ensure no border on hover
                            },
                            "&.Mui-focused": {
                              "& fieldset": {
                                border: "2px solid #00B097",
                              },
                            },
                          },
                        }}
                      />
                      <Popper
                        open={isSearchResultsOpen}
                        anchorEl={anchorEl}
                        placement="top-start"
                        className="formulation-table-searchresults"
                      >
                        <div
                          ref={listRef}
                          className={searchResults.length > 0 ? "search-results" : "noDataMain"}
                          style={{
                            fontFamily: "kenvue-sans-regular",
                          }}
                        >
                          <Table>
                            <TableBody>
                              {mode !== "view" &&
                                searchResults?.map((result, index) => (
                                  <TableRow
                                    key={`${index}+${result.tradeName}`}
                                    hover
                                    onClick={() => handleSearchSelect(result)}
                                  >
                                    <TableCell style={{ fontFamily: "kenvue-sans-regular" }}>{result.tradeName}</TableCell>
                                    <TableCell style={{ fontFamily: "kenvue-sans-regular" }}>{result.rawMaterialId}</TableCell>
                                  </TableRow>
                                ))
                              }
                            </TableBody>


                          </Table>
                          {noResultFound && searchValue && (
                            <div className="noData">
                              <div><CancelOutlinedIcon /></div>
                              <div><span className="NoDataTitle">No result found</span></div>
                            </div>
                          )}
                        </div>
                      </Popper>
                    </>
                  )}
                </div >
                  

  now i am having an issue as following
when i search first time as water that time search result is not empty so all the list is displayed of result 
then i erase the water in search field and starts to type the letter which is not present in data 
that time i am able to view the msg as "No result found"
  in 3rd time when i starts search as again water or anything which present in data that time for some time i am getting No Result Found msg 
when i erase everything and type anything again that time i dont want to show the o result fount msg till api hit 
how to achieve this?
