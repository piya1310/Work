export interface ExperimentalDataItem {
  _id: string;
  name: string;
  zone: string;
  net_content: string;
  assessmentId: string;
  fg_spec: string;
  formula_number: string;
  lab_notebook_code: string;
  pc_spec: string;
  isPackagingDataCompleted: boolean;
  isFormulationDataCompleted: boolean;
  isDeleted?: boolean;
  updatedAt?: string;
  createdAt?: string;
  users?: Array<RowUsers>;
  description?: string;
  projectId?: string;
  projectName?: string;
  productSipId?: string;
  productName?: string;
  brandName?: string;
  sku_erp_code?: string;
  isCalculating?: boolean;
  isEdited?: boolean;
  createdBy?: string;

  type?: string;
  assessments?: {
    baseline?: Assessment;
    experimental?: Assessment[];
    final?: Assessment;
  };
}
const [visibleItems, setVisibleItems] = useState(6);
const [items, setItems] = useState < ExperimentalDataItem[] > ([]);

useEffect(() => {
  if (sortValue === null) {
    setItems(data?.product?.slice(0, visibleItems));
  } else {
    let copyArrayvalue: ExperimentalDataItem[] = [];
    copyArrayvalue = productSortFunction(data?.product, sortValue);
    setItems(copyArrayvalue);
  }
}, [visibleItems, data?.product?.length, data, sortValue]);
const loadMore = () => {
  setVisibleItems((prevVisibleItems) => prevVisibleItems + 4);

  items.length > 0 ? setHasMore(true) : setHasMore(false);
};
useEffect(() => {
  if (value === "Modified Date") {
    const copyArrayvalue: ExperimentalDataItem[] = [...data.product]
      .sort((a, b) => {
        const convertDate = a?.updatedAt ?? ""; //.replace(/(st|nd|rd|th)/, "");
        const convertDateB = b?.updatedAt ?? ""; //.replace(/(st|nd|rd|th)/, "");
        return (
          new Date(convertDate).getTime() - new Date(convertDateB).getTime()
        );
      })
      .reverse();
    setItems(copyArrayvalue.slice(0, visibleItems));
  }
}, [data?.product, value, visibleItems]);
<InfiniteScroll
  dataLength={items?.length}
  next={loadMore}
  hasMore={hasMore}
  loader={""}
>
  {gridViewOpen ? (
    <div style={{ top: "20px", marginTop: "10px" }}>
      <GridviewCard
        props={items}
        refetch={data.refetch}
        pageRouter="myproduct"
        sort_order={value}
        loggedInUserEmail={loginUserEmail}
      />
    </div>
  ) : (
    <div style={{ top: "20px", marginTop: "10px", paddingRight: "24px" }}>
      <ListviewCard
        props={items}
        refetch={data.refetch}
        pageRouter="myproduct"
        sort_order={value}
        loggedInUserEmail={loginUserEmail}
      />
    </div>
  )}
</InfiniteScroll>

here const [visibleItems, setVisibleItems] = useState(6); i specified the static numberas 6
i am getting one problem in my react application 
i am dispalying the product cards in screen 
suppose i have 20 product then all 20 is displayed on screen on normal screen but 
but when i am zoom my screen to 50% that time only 6 product is displayed on my screen . i guess this issue is due to we specify 6 in useState
 i acheck api response . in response all 20 product data is present then why my 6 product is displayed .
 and heignt is stopped for screen . but when i open inspect tool then all product is displayed .
i dont want to specify 6. or any static value it should be dynamic .
thats why i am getting issue
could you please fix it
following is the code for GridComponent code
"""
  return (
    <>
      <Grid className="product-grid-container">
        {props?.map((row: ExperimentalDataItem, row_index: number) => (
          // <Grid item xs={12} sm={6} md={4} lg={4} key={rowIndex}>
            <div className="card-container" key={row_index + 1}>
      
              <CardContent
                className="card-content"
                onClick={() => handleCardClick(row)}
              >
                <Box sx={{display:"flex", flexDirection:"column", gap:"24px", alignItems:"self-start"}}>
                  <Box sx={{display:"flex",width:"100%", flexDirection:"row", alignItems:"center", justifyContent:"space-between"}}>
                  <Chip label={row.type} sx={{ backgroundColor: row.type === 'Final' ? "#FFB000 !important" : "#D3BDF2 !important" }} className="custom-chip" />
                    <div className="date-label">    
                    <span className="gridsorting">
  {sort_order === "Created Date" ? "Date Created:" : "Date Modified:"} &nbsp;
  {sort_order === "Created Date" ? formatDate(row.createdAt) : formatDate(row.updatedAt)}
</span>

                    </div>
                  
                    {CheckCRUDAccess(row.users, "product") === 1 && (
                      <IconButton
                        onClick={(e) => handleMoreHorizClick(e, row)}
                        className="more-icon"
                      >
                        <MoreHorizIcon />
                      </IconButton>
                    )}
                   
                  </Box>
                  <Menu
                  
                    anchorEl={anchorEl}
                    open={Boolean(anchorEl)}
                    onClose={handleMenuClose}
                    className="menu"
                  >
                   <MenuItem onClick={(ev) => handleOpenDialog(ev, {
                                  productName: slcRow.productName ?? "",
                                  brandName: slcRow.brandName ?? "",
                                  projectId: slcRow.projectId ?? "",
                                  description: slcRow.description ?? "",
                                  projectName: slcRow.projectName ?? "",
                                  _id: slcRow._id,
                                })}>
                      Edit <ModeEditOutlinedIcon />
                    </MenuItem>
                    <Divider />
                    <MenuItem onClick={(ev) =>
                                handleOpenDeletePopup(ev, slcRow._id)
                              }>
                      Delete <DeleteIcon />
                    </MenuItem>
                  </Menu>
  
                  <Box sx={{display:"flex",width:"100%", flexDirection:"row", alignItems:"center", justifyContent:"space-between"}}>
                    <div className="section">
                      <div className="brand-name">{truncate(row.brandName, 22)}</div>
                      <div className="id-value">{truncate(row.productName, 50)}</div>
                    </div>
                  </Box>
                  <Box sx={{display:"flex",width:"100%", flexDirection:"row", alignItems:"center", justifyContent:"space-between"}}>
                  <div className="section">
                    <div className="id-label">SIP ID</div>
                    <div className="id-value">{row.productSipId}</div>
                  </div>
                  <div className="section">
                    <div className="id-label">Project ID</div>
                    <div className="id-value">{row.projectId || "N/A"}</div>
                    </div>
                  </Box>
                  <Box sx={{display:"flex",width:"100%", flexDirection:"row", alignItems:"center", justifyContent:"space-between"}}>
                  <AvatarGroup max={4} className="custom-avatar-group">
                    {row.users.map((user: RowUsers, index: number) => (
                      <Avatar key={index+1} title={user.name} className="user-avatar">
                        {getAvatarLetters(user?.name)}
                      </Avatar>
                    ))}
                  </AvatarGroup>
                  </Box>
                  <Box sx={{display:"flex",width:"100%", flexDirection:"row", alignItems:"center", justifyContent:"space-between"}}>
                  <div className="section">
                    <div className="description-title">Description</div>
                    <div className="description-text">{truncate(row.description, 100) || "N/A"}</div>
                  </div>
                  </Box>
                </Box>
                          
              </CardContent>
            </div>
          // </Grid>
          
        ))}
      </Grid>
      <Popup
        key={dialogKey}
        open={dialogOpen}
        onClose={handleCloseDialog}
        onSubmit={handleSubmit}
        initialValues={initialProductValues}
        refetch={refetch}
      />
      <DeletePopupBox
        open={deletePopupOpen}
        onClose={handleCloseDeletePopup}
        onDelete={handleDelete}
        dialogTitle="Warning"
        dialogContent={WARNING_MSG_DELETE_PRODUCT}
        deleteHideButton={deleteHideButton}
      />
      {getToastContainer()}
    </>
  );"""
this cards are displayed but when 50 % it displayed only 6 cards. i dont want only 6 i want all cards anything number of cards will be there

