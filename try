Error: Failed to connect to database: MongooseServerSelectionError: Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/ - DB URI mongodb://SIP-Dev-SystemAccount:pass@sip-dev-pl-0.eovja.mongodb.net/sip?connectTimeoutMS=15000&retryWrites=true&w=majority

    at connectDatabase (/home/jenkins/agent/workspace/FUX_website_-_rdx-sip-bs-ms_prod/src/lib/db.connection.ts:672:11)
i am getting error in jenkins pipeline log how to mock the database connection as following and use to refuse direct connection to actual db. help here
jest.mock('../../../lib/db.connection', () => ({
  connectDatabase: jest.fn().mockResolvedValue({
    connection: { readyState: 1 },
    disconnect: jest.fn()
  })
}));
following is my modules/product/_test_/product.routes.spec.ts filr
"""

jest.mock("p-limit", () => {
  return () => 12;
});
jest.mock("../product.model");
jest.mock("../../calculation_api/calculation.model");
jest.mock("../../formula/formula.model");
jest.mock("../../raw_material_search/rm_search.model");
jest.mock("../../component_pc_search/component_search.model");

describe('productRouter', () => {
  const res = mockResponse();
    const req = mockRequest();
    const next = jest.fn();
    res.locals = {
      user: {
        unique_name: "ITEST123",
        name: "ITEST123"
      }
    }
    req.query = {
      skip: 1,
      sortOrder: -1,
      type: "experiment"
    };
    req.params = {
      id: "66f2930877a89aa14b990958",
      assessmentType : "experiment",
      searchString: "test"
    }
    req.body = {
      shortBrandCode: "JJB",
      formula_number: "TAB2299983A-002",
      type: "baseline",
      name: "Poonam",
      role: "Member",
      mail: "PKadam04@kenvue.com",
      assessmentType : "baseline",
      productId: "66f2930877a89aa14b990958",
      ...ProductMock[0].assessments.baseline
    };
    req.header['x-consumer-userId'] = 'ITEST236';
  beforeEach(() => {
    mockedCalculationsModel.mockReturnValue({
      findOne: jest.fn().mockReturnValue(ProductMock),
      findOneAndUpdate: jest.fn().mockReturnValue(ProductMock),
    })
    mockedinitializeCalculationModel.mockReturnValue({
      findOne: jest.fn().mockReturnValue(ProductMock),
      findOneAndUpdate: jest.fn().mockReturnValue(ProductMock),
    })
    mockedRawMaterialsModel.mockReturnValue({
      findOne: jest.fn().mockReturnValue(RawMaterialMock),
    })
    mockedinitializeRawMaterialModel.mockReturnValue({
      findOne: jest.fn().mockReturnValue(RawMaterialMock),
    })
    
    mockedFormulaModel.mockReturnValue({
      findOne: jest.fn().mockResolvedValue([{ "frml_cd_vers_concat": "test" }]).mockReturnValue(FormulaMock),
    })
    mockedinitializeFormulaModel.mockReturnValue({
      findOne: jest.fn().mockResolvedValue([{ "frml_cd_vers_concat": "test" }]).mockReturnValue(FormulaMock),
    })
    mockedProductSearchModel.mockReturnValue({
      findOne: jest.fn().mockResolvedValue([{ "PACKAGING_LVL.COMPONENT.CHILD_NM": "test" }]).mockReturnValue(ComponentSearchMock),
      find: jest.fn().mockReturnThis(),
      skip: jest.fn().mockReturnThis(),
      limit: jest.fn().mockReturnThis(),
      toArray: jest.fn().mockResolvedValue([{ "PACKAGING_LVL.COMPONENT.CHILD_NM": "test" }]).mockReturnValue(ComponentSearchMock),
    })
    mockedinitializeComponentSearchModel.mockReturnValue({
      findOne: jest.fn().mockResolvedValue([{ "PACKAGING_LVL.COMPONENT.CHILD_NM": "test" }]).mockReturnValue(ComponentSearchMock),
      find: jest.fn().mockReturnThis(),
      skip: jest.fn().mockReturnThis(),
      limit: jest.fn().mockReturnThis(),
      toArray: jest.fn().mockResolvedValue([{ "PACKAGING_LVL.COMPONENT.CHILD_NM": "test" }]).mockReturnValue(ComponentSearchMock),
    })
  })

  it('Should route to pagination, create, findByIdAndUpdate and findByIdAndDelete for success message', async () => {
    mockedProductModel.mockReturnValue({
      aggregate: jest.fn().mockReturnThis(),
      findOne: jest.fn().mockReturnThis(),
      sort: jest.fn().mockReturnValue(ProductMock[0]),
      find: jest.fn().mockReturnValue(ProductMock),
      create: jest.fn().mockReturnValue(ProductMock),
      findByIdAndUpdate: jest.fn().mockReturnValue(ProductMock),
      findOneAndUpdate: jest.fn().mockReturnValue(ProductMock),
      exec: jest.fn().mockResolvedValue([{ "skip": "test" }]).mockReturnValue(ProductMock),
    })
    mockedinitializeProductModel.mockReturnValue({
      aggregate: jest.fn().mockReturnThis(),
      findOne: jest.fn().mockReturnThis(),
      sort: jest.fn().mockReturnValue(ProductMock[0]),
      find: jest.fn().mockReturnValue(ProductMock),
      create: jest.fn().mockReturnValue(ProductMock),
      findByIdAndUpdate: jest.fn().mockReturnValue(ProductMock),
      findOneAndUpdate: jest.fn().mockReturnValue(ProductMock),
      exec: jest.fn().mockResolvedValue([{ "skip": "test" }]).mockReturnValue(ProductMock),
    })
    const mRouter = {
      get: (path, callback) => {
        if (path === '/') {
          callback(req, res, next);
        }
      },
      post: (path, callback) => {
        if (path === '/add-product') {
          callback(req, res, next);
        }
      },
      put: (path, callback) => {
        if (path === '/edit-product/:id') {
          callback(req, res, next);
        }
      },
      delete: (path, callback) => {
        if (path === '/delete/:id') {
          callback(req, res, next);
        }
      },
      then: jest.fn()
    } as never;
    jest.spyOn(express, 'Router').mockImplementationOnce(() => mRouter);

    productRouter();
  });



  it('Should route to processPackaging for failure message', async () => {
    mockedProductModel.mockReturnValue({
      aggregate: jest.fn().mockReturnThis(),
      findOne: jest.fn().mockReturnThis(),
      sort: jest.fn().mockReturnValue(ProductMock[0]),
      find: jest.fn().mockReturnValue(ProductMock),
      create: jest.fn().mockReturnValue(ProductMock),
      findByIdAndUpdate: jest.fn().mockReturnValue(ProductMock),
      findOneAndUpdate: jest.fn().mockReturnValue(ProductMock),
      exec: jest.fn().mockResolvedValue([{ "skip": "test" }]).mockReturnValue(ProductMock),
    })
    mockedinitializeProductModel.mockReturnValue({
      aggregate: jest.fn().mockReturnThis(),
      findOne: jest.fn().mockReturnThis(),
      sort: jest.fn().mockReturnValue(ProductMock[0]),
      find: jest.fn().mockReturnValue(ProductMock),
      create: jest.fn().mockReturnValue(ProductMock),
      findByIdAndUpdate: jest.fn().mockReturnValue(ProductMock),
      findOneAndUpdate: jest.fn().mockReturnValue(ProductMock),
      exec: jest.fn().mockResolvedValue([{ "skip": "test" }]).mockReturnValue(ProductMock),
    })
    const productController = await initializeProductController();
    await productController.processPackaging(ProductMock[3].assessments.baseline.packaging_level)
  });

});

"""
