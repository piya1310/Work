  .custom-avatar-group {

    justify-content: flex-start;
    gap: 8px; // Aligns all avatars to the left
  
    // Style for each user avatar (with initials)
    .user-avatar {
      background-color: #673ab7; // Purple background for individual user avatars
      color: white; // White text color for initials
    margin - right: 8px; // 8px gap between each avatar

    // Style specifically for the +N overflow avatar
    .MuiAvatarGroup - avatar {
      background - color: #673ab7; // Grey background for +N overflow avatar
      color: rgb(255, 255, 255); // Black text color for +N
      font - family: "Kenvue Sans", sans - serif;
      font - size: 13.33px;
      font - weight: 700;
      line - height: 19.99px;
      text - align: center; // Center text for +N display
      width: 36px; // Ensuring fixed width for overflow avatar if needed
      height: 36px;
      gap: 8px;// Ensuring fixed height for overflow avatar if needed
    }
  }

    return (
      <>
        <Grid className="product-grid-container">
          {props?.map((row: ExperimentalDataItem, row_index: number) => (

            <div className="card-container" key={row_index + 1}>

              <CardContent
                className="card-content"
                onClick={() => handleCardClick(row)}
              >
                <Box sx={{ display: "flex", flexDirection: "column", gap: "24px", alignItems: "self-start" }}>
                  <Box sx={{ display: "flex", width: "100%", flexDirection: "row", alignItems: "center", justifyContent: "space-between" }}>
                    <Chip label={row.type} sx={{ backgroundColor: row.type === 'Final' ? "#FFB000 !important" : "#D3BDF2 !important" }} className="custom-chip" />
                    <div className="date-label">
                      <span className="gridsorting">
                        {sort_order === "Created Date" ? "Date Created:" : "Date Modified:"} &nbsp;
                        {sort_order === "Created Date" ? formatDate(row.createdAt) : formatDate(row.updatedAt)}
                      </span>

                    </div>

                    {CheckCRUDAccess(row.users, "product") === 1 && (
                      <IconButton
                        onClick={(e) => handleMoreHorizClick(e, row)}
                        className="more-icon"
                      >
                        <MoreHorizIcon />
                      </IconButton>
                    )}

                  </Box>
                  <Menu

                    anchorEl={anchorEl}
                    open={Boolean(anchorEl)}
                    onClose={handleMenuClose}
                    className="menu"
                  >
                    <MenuItem onClick={(ev) => handleOpenDialog(ev, {
                      productName: slcRow.productName ?? "",
                      brandName: slcRow.brandName ?? "",
                      projectId: slcRow.projectId ?? "",
                      description: slcRow.description ?? "",
                      projectName: slcRow.projectName ?? "",
                      _id: slcRow._id,
                    })}>
                      Edit <ModeEditOutlinedIcon />
                    </MenuItem>
                    <Divider />
                    <MenuItem onClick={(ev) =>
                      handleOpenDeletePopup(ev, slcRow._id)
                    }>
                      Delete <DeleteIcon />
                    </MenuItem>
                  </Menu>

                  <Box sx={{ display: "flex", width: "100%", flexDirection: "row", alignItems: "center", justifyContent: "space-between" }}>
                    <div className="section">
                      <div className="brand-name">{truncate(row.brandName, 22)}</div>
                      <div className="id-value">{truncate(row.productName, 50)}</div>
                    </div>
                  </Box>
                  <Box sx={{ display: "flex", width: "100%", flexDirection: "row", alignItems: "center", justifyContent: "space-between" }}>
                    <div className="section">
                      <div className="id-label">SIP ID</div>
                      <div className="id-value">{row.productSipId}</div>
                    </div>
                    <div className="section">
                      <div className="id-label">Project ID</div>
                      <div className="id-value">{row.projectId || "N/A"}</div>
                    </div>
                  </Box>
                  <Box sx={{ display: "flex", width: "100%", flexDirection: "row", alignItems: "center", justifyContent: "space-between" }}>
                    <AvatarGroup max={4} className="custom-avatar-group">
                      {row.users.map((user: RowUsers, index: number) => (
                        <Avatar key={index + 1} title={user.name} className="user-avatar">
                          {getAvatarLetters(user?.name)}
                        </Avatar>
                      ))}
                    </AvatarGroup>
                  </Box>
                  <Box sx={{ display: "flex", width: "100%", flexDirection: "row", alignItems: "center", justifyContent: "space-between" }}>
                    <div className="section">
                      <div className="description-title">Description</div>
                      <div className="description-text">{truncate(row.description, 100) || "N/A"}</div>
                    </div>
                  </Box>
                </Box>

              </CardContent>
            </div>


          ))}
        </Grid>
        <Popup
          key={dialogKey}
          open={dialogOpen}
          onClose={handleCloseDialog}
          onSubmit={handleSubmit}
          initialValues={initialProductValues}
          refetch={refetch}
        />
        <DeletePopupBox
          open={deletePopupOpen}
          onClose={handleCloseDeletePopup}
          onDelete={handleDelete}
          dialogTitle="Warning"
          dialogContent={WARNING_MSG_DELETE_PRODUCT}
          deleteHideButton={deleteHideButton}
        />
        {getToastContainer()}
      </>
    );
    in above code when my cards is displayed that time on screen and i scroll up and down that time the the avtar of users are moving up and down it is not stick with the product card.Avatarlike product card others element stayed as it is along with the card but my avtars are moving like they are not stick with particular cards.Avatarwhy this issue 
      why this issue is persist how to solve?
      < AvatarGroup max = { 4} className = "custom-avatar-group" >
      {
        row.users.map((user: RowUsers, index: number) => (
          <Avatar key={index + 1} title={user.name} className="user-avatar">
            {getAvatarLetters(user?.name)}
          </Avatar>
        ))
      }
                  </AvatarGroup >
