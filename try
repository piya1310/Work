javascript
import { mockRequest, mockResponse } from "../../../utils/MockInterceptor.js";
import { ProductMock } from "../../../mocks/Product.mock.js";
import ProductModel from "../product.model.js"; // Import the actual model to mock
import productRouter from "../product.routes.js";
import express from "express";

// Mocking the database connection
jest.mock('../../../lib/db.connection', () => ({
  connectDatabase: jest.fn().mockResolvedValue({
    connection: { readyState: 1 },
    disconnect: jest.fn()
  }),
}));

// Mocking data models
jest.mock("../product.model");
jest.mock("../../calculation_api/calculation.model");
jest.mock("../../formula/formula.model");
jest.mock("../../raw_material_search/rm_search.model");
jest.mock("../../component_pc_search/component_search.model");

const mockedProductModel = ProductModel as jest.Mock;

describe('productRouter', () => {
  const res = mockResponse();
  const req = mockRequest();
  const next = jest.fn();

  // Setup your request and response as needed
  beforeEach(() => {
    // This is where you'd set up any default mock implementations
    mockedProductModel.mockReturnValue({
      findOne: jest.fn().mockResolvedValue(ProductMock[0]),
      // Add other methods you might use in your tests
      create: jest.fn().mockResolvedValue(ProductMock[0]),
      findByIdAndUpdate: jest.fn().mockResolvedValue(ProductMock[0]),
      // Add other necessary mocks to your models
    });
  });

  it('Should route to pagination, create, findByIdAndUpdate and findByIdAndDelete for success message', async () => {
    // Your test logic here...
    const mRouter = {
      get: jest.fn(),
      post: jest.fn(),
      put: jest.fn(),
      delete: jest.fn(),
    };

    jest.spyOn(express, 'Router').mockImplementationOnce(() => mRouter);

    // Call the productRouter function to setup routing
    productRouter();
    
    // Simulate requests (this should be how you invoke your API endpoints)
    mRouter.get.mock.calls[0][1](req, res, next); // for GET /
    // Add more calls for other routes/setups as necessary
  });

  // Add more test cases as needed...
});
