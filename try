const Root = (props: RootProps) => {
  const [userName, setUserName] = useState("");
  const [loggedInUser, setLoggedInUser] = useState<UserData | null>(null);
  const [showToast, setShowToast] = useState(false); // State to manage ToastMessage
  const [toastContent, setToastContent] = useState(""); // State for toast content
  const loggedInUserDetails = getLoggedInUserDetails();

  const userDetails = localStorage.getItem("userDetails");
  const token = useMemo(() => {
    return userDetails;
  }, [userDetails]);

  const handleSignOutClick = () => {
    setToastContent("Are you sure to Sign out?"); // Set the toast content
    setShowToast(true); // Show the custom toast
  };

  const handleConfirm = () => {
    localStorage.removeItem("landingTime");
    localStorage.setItem("session", "0");
    props?.mfProps?.publish("core-header-ui-mf:signout");
    setShowToast(false); // Hide the toast
  };

  const handleCancel = () => {
    setShowToast(false); // Hide the toast
  };

  return (
    <React.StrictMode>
      {token ? (
        <LoadingProvider>
          <DataProvider>
            <AutoSaveStateProvider>
              <SidebarStateProvider>
                <ThemeProvider theme={Theme}>
                  <QueryClientProvider client={queryClient}>
                    <BrowserRouter>
                      <Box className="main-root">
                        {token && window.location.pathname !== "/sip/login" && (
                          <SideBarAction
                            mfProps={props?.sipUiMfScreen}
                            onSignOutClick={handleSignOutClick} // pass handler to SideBarAction
                          />
                        )}
                        <Box component="main" className="dashboard-main">
                          <LoadingScreen />
                          <Routes>
                            {/* Your routes go here */}
                          </Routes>
                        </Box>
                        {/* Display the ToastMessage at the root level */}
                        {showToast && (
                          <ToastMessage
                            content={toastContent}
                            onConfirm={handleConfirm}
                            onCancel={handleCancel}
                          />
                        )}
                      </Box>
                    </BrowserRouter>
                    {/* <ReactQueryDevtools initialIsOpen={true} /> */}
                  </QueryClientProvider>
                </ThemeProvider>
              </SidebarStateProvider>
            </AutoSaveStateProvider>
          </DataProvider>
        </LoadingProvider>
      ) : (
        ""
      )}
    </React.StrictMode>
  );
};

export default Root;


export default function SideBarAction(props: SideBarProps) {
  const { onSignOutClick } = props; // Destructure here

  return (
    window.location.pathname !== "/sip/login" && (
      <Box className="sidebar-main">
        <CssBaseline />
        <Drawer className="sidebar-drawer" variant="permanent" open={open}>
          {/* ... Other code remains unchanged ... */}
          <ListItemIcon
            onClick={onSignOutClick} // Call the function passed from Root
          >
            <BootstrapTooltipSideBar
              className="BootstrapTooltipSidebar"
              title={<p className="BootstrapTooltipSidebar-p">Sign Out</p>}
            >
              {getSignOutIcon(open)}
            </BootstrapTooltipSideBar>
          </ListItemIcon>
          {/* ... Rest of the code ... */}
        </Drawer>
      </Box>
    )
  );
}
