jest.mock('../../../lib/db.connection', () => ({
  connectDatabase: jest.fn().mockResolvedValue({
    connection: { readyState: 1 }, // Simulating a connected state
    disconnect: jest.fn()
  })
}));
??????????????????????????????

javascript
// Mocking the database connection
jest.mock('../../../lib/db.connection', () => ({
  connectDatabase: jest.fn().mockResolvedValue({
    connection: { readyState: 1 }, // This simulates a connected state
    disconnect: jest.fn()
  })
}));

// Importing necessary modules and files
import { mockRequest, mockResponse } from "../../../utils/MockInterceptor.js";
import { ProductMock } from "../../../mocks/Product.mock.js";
import ProductModel, { initializeProductModel } from "../product.model.js";
// ... other imports remain unchanged

// Your other jest mocks for models (if any)
jest.mock("p-limit", () => {
  return () => 12;
});

// Mock the other models in a similar way
jest.mock("../product.model");
jest.mock("../../calculation_api/calculation.model");
jest.mock("../../formula/formula.model");
jest.mock("../../raw_material_search/rm_search.model");
jest.mock("../../component_pc_search/component_search.model");

describe('productRouter', () => {
  const res = mockResponse();
  const req = mockRequest();
  // Set up req and res properties as needed...

  beforeEach(() => {
    // Set up mocks for any model methods
    mockedProductModel.mockReturnValue({
      find: jest.fn().mockResolvedValue(ProductMock),  // Mock your specific return values.
      // ... Other mock returns as necessary
    });
    // Setup for other mocked models and functions...
  });

  // Your tests go here...
});
